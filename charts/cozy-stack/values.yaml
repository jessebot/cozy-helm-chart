# Default values for cozy-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: cozy/cozy-stack
  # -- set to Always if you're using the tag: "latest"
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

cozy:
  # -- cozy admin user's password. ignored if cozy.existingSecret is set
  adminPassphrase: ""
  # -- existing kubernetes secret containing a key called passphrase
  existingAdminSecret: ""
  # -- file system directory
  # see: https://github.com/cozy/cozy-stack/blob/0fe78134b2d09c73813be48274c66ed8582328e6/cozy.example.yaml#L64
  fs_url: "/var/lib/cozy"
  # -- override the default cozy configuration with your own secret that will be mounted at {{ Values.cozy.fs_url }}/.cozy
  # must contain a key called one of: cozy.yaml, cozy.yaml.local, cozy.yml, cozy.yml.local, cozy.json
  existingConfigSecret: ""

couchdb:
  # -- hostname of the couchdb server
  host: ""
  # -- port to connect to the database over
  port: "5984"
  # -- connect to couchdb with either http or https
  protocol: "http"
  # -- username to connect to couchdb with
  user: ""
  # -- password to connection to couchdb with
  password: ""
  # -- existing kubernetes secret with couchdb related secret keys:
  # "host", "user", "password", "protocol", "port"
  existingSecret: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "cozy"

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 3552

securityContext:
  runAsUser: 3552
  runAsGroup: 3552
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Additional volumes on the output Deployment definition.
extraVolumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
extraVolumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
